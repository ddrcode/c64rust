// https://www.c64-wiki.com/wiki/Keyboard_cod
//
// I hate myself for the code below

#[allow(non_camel_case_types, dead_code)]
#[derive(Clone, Copy, Debug)]
pub enum C64KeyCode {
    Delete = 0x00,
    Return = 0x01,
    CursorLR = 0x02,
    F7 = 0x03,
    F1 = 0x04,
    F3 = 0x05,
    F5 = 0x06,
    CursorUD = 0x07,
    Key_3 = 0x08,
    Key_W = 0x09,
    Key_A = 0x0a,
    Key_4 = 0x0b,
    Key_Z = 0x0c,
    Key_S = 0x0d,
    Key_E = 0x0e,
    LShift = 0x0f,
    Key_5 = 0x10,
    Key_R = 0x11,
    Key_D = 0x12,
    Key_6 = 0x13,
    Key_C = 0x14,
    Key_F = 0x15,
    Key_T = 0x16,
    Key_X = 0x17,
    Key_7 = 0x18,
    Key_Y = 0x19,
    Key_G = 0x1a,
    Key_8 = 0x1b,
    Key_B = 0x1c,
    Key_H = 0x1d,
    Key_U = 0x1e,
    Key_V = 0x1f,
    Key_9 = 0x20,
    Key_I = 0x21,
    Key_J = 0x22,
    Key_0 = 0x23,
    Key_M = 0x24,
    Key_K = 0x25,
    Key_O = 0x26,
    Key_N = 0x27,
    Plus = 0x28,
    Key_P = 0x29,
    Key_L = 0x2a,
    Minus = 0x2b,
    Dot = 0x2c,
    Colon = 0x2d,
    At = 0x2e,
    Comma = 0x2f,
    Pound = 0x30,
    Asterix = 0x31,
    Semicolon = 0x32,
    Home = 0x33,
    RShift = 0x34,
    Equal = 0x35,
    UpArrow = 0x36,
    Slash = 0x37,
    Key_1 = 0x38,
    LeftArrow = 0x39,
    Ctrl = 0x3a,
    Key_2 = 0x3b,
    Space = 0x3c,
    Cmd = 0x3d,
    Key_Q = 0x3e,
    Stop = 0x3f,
}

impl Into<u8> for C64KeyCode {
    fn into(self) -> u8 {
        self as u8
    }
}

impl C64KeyCode {
    pub fn from_char(ch: char) -> Option<Self> {
        use C64KeyCode::*;
        Some(match ch {
            'a' => Key_A,
            'b' => Key_B,
            'c' => Key_C,
            'd' => Key_D,
            'e' => Key_E,
            'f' => Key_F,
            'g' => Key_G,
            'h' => Key_H,
            'i' => Key_I,
            'j' => Key_J,
            'k' => Key_K,
            'l' => Key_L,
            'm' => Key_M,
            'n' => Key_N,
            'o' => Key_O,
            'p' => Key_P,
            'q' => Key_Q,
            'r' => Key_R,
            's' => Key_S,
            't' => Key_T,
            'u' => Key_U,
            'v' => Key_V,
            'w' => Key_W,
            'x' => Key_X,
            'y' => Key_Y,
            'z' => Key_Z,
            '0' => Key_0,
            '1' => Key_1,
            '2' => Key_2,
            '3' => Key_3,
            '4' => Key_4,
            '5' => Key_5,
            '6' => Key_6,
            '7' => Key_7,
            '8' => Key_8,
            '9' => Key_9,
            '.' => Dot,
            ',' => Comma,
            '/' => Slash,
            ';' => Semicolon,
            ':' => Colon,
            '-' => Minus,
            '+' => Plus,
            '=' => Equal,
            'Â£' => Pound,
            '@' => At,
            '*' => Asterix,
            ' ' => Space,
            _ => return None,
        })
    }

    pub fn is_modifier(&self) -> bool {
        match self {
            C64KeyCode::RShift | C64KeyCode::LShift => true,
            _ => false,
        }
    }
}

impl From<u8> for C64KeyCode {
    fn from(code: u8) -> Self {
        use self::C64KeyCode::*;
        match code {
            0x00 => Delete,
            0x01 => Return,
            0x02 => CursorLR,
            0x03 => F7,
            0x04 => F1,
            0x05 => F3,
            0x06 => F5,
            0x07 => CursorUD,
            0x08 => Key_3,
            0x09 => Key_W,
            0x0a => Key_A,
            0x0b => Key_4,
            0x0c => Key_Z,
            0x0d => Key_S,
            0x0e => Key_E,
            0x0f => LShift,
            0x10 => Key_5,
            0x11 => Key_R,
            0x12 => Key_D,
            0x13 => Key_6,
            0x14 => Key_C,
            0x15 => Key_F,
            0x16 => Key_T,
            0x17 => Key_X,
            0x18 => Key_7,
            0x19 => Key_Y,
            0x1a => Key_G,
            0x1b => Key_8,
            0x1c => Key_B,
            0x1d => Key_H,
            0x1e => Key_U,
            0x1f => Key_V,
            0x20 => Key_9,
            0x21 => Key_I,
            0x22 => Key_J,
            0x23 => Key_0,
            0x24 => Key_M,
            0x25 => Key_K,
            0x26 => Key_O,
            0x27 => Key_N,
            0x28 => Plus,
            0x29 => Key_P,
            0x2a => Key_L,
            0x2b => Minus,
            0x2c => Dot,
            0x2d => Colon,
            0x2e => At,
            0x2f => Comma,
            0x30 => Pound,
            0x31 => Asterix,
            0x32 => Semicolon,
            0x33 => Home,
            0x34 => RShift,
            0x35 => Equal,
            0x36 => UpArrow,
            0x37 => Slash,
            0x38 => Key_1,
            0x39 => LeftArrow,
            0x3a => Ctrl,
            0x3b => Key_2,
            0x3c => Space,
            0x3d => Cmd,
            0x3e => Key_Q,
            0x3f => Stop,
            _ => panic!("Unrecognized keycode {code}"),
        }
    }
}
